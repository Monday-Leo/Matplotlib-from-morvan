#基本用法
import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(-1,1,50)
y = 2*x+1
plt.plot(x,y)		#导入横坐标和纵坐标，函数连续
plt.show()		#展示图片



#figure图像
import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(-3,3,50)
y1 = 2*x+1
y2 = x**2

plt.figure()				#创建一个figure
plt.plot(x,y1)				#导入横坐标和纵坐标

plt.figure(num=3,figsize = (8,5))	#创建第二个figure，并且编号3，长宽定为8和5
plt.plot(x,y2)				#导入y2
plt.plot(x,y1,color = 'red',
	linewidth = 10,linestyle = '--')#导入y1,颜色红色，线宽10，改为虚线

plt.show()				#展示图片


#设置坐标轴与图例legend()
import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(-3,3,50)
y1 = 2*x+1
y2 = x**2

plt.figure(num=3,figsize = (8,5))	#创建第二个figure，并且编号3，长宽定为8和5
l1,=plt.plot(x,y2)				#导入y2
l2,=plt.plot(x,y1,color = 'red',
	linewidth = 10,linestyle = '--')#导入y1,颜色红色，线宽10，改为虚线


plt.xlim((-1,2))			#x展示的范围
plt.ylim((-2,3))			#y展示的范围
plt.xlabel('I am X')			#在x轴下册给x加标签
plt.ylabel('I am Y')			#在y轴左侧给y加标签

new_ticks = np.linspace(-1,2,5)
plt.xticks(new_ticks)			#改变x轴上上的数字
plt.yticks([-2,-1.8,-1,1.22,3],
	   [r'$really\ bad$',r'$bad$',r'$normal$',r'$good$',r'$really\ good$'])
#将y轴数改为文字，$用于改变字体，空格需要\转译

ax = plt.gca()  			
ax.spines['right'].set_color('none')	#去掉右边框线
ax.spines['top'].set_color('none')	#去掉顶部框线
ax.xaxis.set_ticks_position('bottom')	#将底部框线设置为x轴
ax.yaxis.set_ticks_position('left')	#将左边框线设置为y轴
ax.spines['bottom'].set_position(('data',1))#将x轴位置放在y=1的位置
ax.spines['left'].set_position(('data',0))#将y轴位置放在x=0的位置

plt.legend(handles=[l1,l2],labels=['a','b'],loc='best')
#在最佳位置显示图例

plt.show()				#展示图片

#写标注
plt.annotate(r'$2x+1=%s$'%y0,xy=(x0,y0),xycoords='data',xytext=(+30,-30),textcoords='offset points',fontsize=16,arrowprops=dic(arrowstyle='->',connectionstyle='arc,rad=.2'))

plt.text(-3.7,3,r'$This\ is\ the\ some\ text.\ \mu\ \sigma_i\ \alpha_t$',
fontdict={'size':16,''color':'r'})


#散点图scatter()
import matplotlib.pyplot as plt
import numpy as np

n = 1024
X = np.random.normal(0,1,1024)		#随机生成平均数为1，方差为1的1024个数
Y = np.random.normal(0,1,1024)
T = np.arctan2(Y,X)

plt.scatter(X,Y,s=75,c=T,alpha=0.5)	#生成离散点阵，颜色为T，透明度0.5

plt.xlim((-1.5,1.5))
plt.ylim((-1.5,1.5))
plt.xticks(())
plt.yticks(())

plt.show()


#条形图bar()
import matplotlib.pyplot as plt
import numpy as np

n = 12
X = np.arange(n)
Y1 = (1-X/n)*np.random.uniform(0.5,1.0,n) #随机生成从0.5到1.0共n个数
Y2 = (1-X/n)*np.random.uniform(0.5,1.0,n)

plt.bar(X,Y1,facecolor='#9999ff',edgecolor='white') #生成条形图，并改变主体和边框颜色
plt.bar(X,-Y2,facecolor='#ff9999',edgecolor='white')

for x,y in zip(X,Y1):
	plt.text(x,y+0.05,'%.2f'%y,ha='center',va='bottom')
#生成标注，水平方向居中，数值方向沉底

for x,y in zip(X,Y2):
	plt.text(x,-y-0.05,'-%.2f'%y,ha='center',va='bottom')
#生成标注，水平方向居中，数值方向沉底

plt.xlim(-0.5,n)
plt.ylim(-1.25,1.25)
plt.xticks(())
plt.yticks(())

plt.show()


#等高图contourf()
import matplotlib.pyplot as plt
import numpy as np

def f(x,y):
	z = (1-x/2+x**5+y**3)*np.exp(-x**2-y**2)	
	return z

n = 256
x = np.linspace(-3,3,n)
y = np.linspace(-3,3,n)
X,Y = np.meshgrid(x,y)		#绑定网格

plt.contourf(X,Y,f(X,Y),8,alpha=0.75,cmap=plt.cm.hot)
#设置等高图三个坐标，分成10块，透明度0.75，颜色hot

C = plt.contour(X,Y,f(X,Y),8,colors='black')
#画出等高线

plt.clabel(C,inline = True,fontsize=10)

plt.xticks(())
plt.yticks(())
plt.show()


#展示图片
import matplotlib.pyplot as plt
import numpy as np

# image data
a = np.array([0.313660827978, 0.365348418405, 0.423733120134,
              0.365348418405, 0.439599930621, 0.525083754405,
              0.423733120134, 0.525083754405, 0.651536351379]).reshape(3,3)

#a为虚拟图片

plt.imshow(a, interpolation='nearest', cmap='bone', origin='lower')
#展示a,格式为nearest最清楚，向下展示，向上为upper
plt.colorbar(shrink=.92)
#旁边显示涂色，缩放比92%

plt.xticks(())
plt.yticks(())
plt.show()


#3D图像plot_surface()
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

fig = plt.figure()
ax = Axes3D(fig)		#创建3D
X = np.arange(-4,4,0.25)
Y = np.arange(-4,4,0.25)
X,Y = np.meshgrid(X,Y)   	#绑定网格
R = np.sqrt(X**2+Y**2)
Z=np.sin(R)*1.2

ax.plot_surface(X,Y,Z,rstride=1,cstride=1,cmap='rainbow')
#创建图像，分割为1*1，颜色为彩虹
ax.contourf(X,Y,Z,zdir='z',offset=-2,cmap='rainbow')
#建立等高图，沿着z轴投影，投影到z=-2平面

ax.set_zlim(-2,2)
plt.show()

#一个figure中显示多张图表
import matplotlib.pyplot as plt

plt.figure()

plt.subplot(2,2,1)	#分为两行两列，图表添加在第一个位置
plt.plot([0,1],[0,1])

plt.subplot(2,2,2)
plt.plot([0,1],[0,2])

plt.subplot(2,2,3)
plt.plot([0,1],[0,3])

plt.subplot(2,2,4)
plt.plot([0,1],[0,4])

plt.show()

#其他方法
ax1 = plt.subplot2grid((3,3),(0,0),colspan=3,rowspan=1)
#分为3行3列，起始在第一行第一列，垮3列，跨1行

#添加次坐标twinx()
import numpy as np
import matplotlib.pyplot as plt

x = np.arange(0,10,0.1)
y1 = 0.05*x**2
y2 = -y1

fig,ax1 = plt.subplots()
ax2 = ax1.twinx()  	 #添加次坐标和次ax
ax1.plot(x,y1,'g--')
ax2.plot(x,y2,'b--')

ax1.set_xlabel('X data')
ax1.set_ylabel('Y1',color='g')
ax2.set_ylabel('Y2',color='b')

plt.show()

#动画animation
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import animation

fig,ax = plt.subplots()
x = np.arange(0,2*np.pi,0.01)
line,=ax.plot(x,np.sin(x))

def animate(i):
	line.set_ydata(np.sin(x+i/10.0))
	#print(i)	#i从0自动累加到frame-1后重置
	return line,

def init():
	line.set_ydata(np.sin(x))
	return line,

ani = animation.FuncAnimation(fig=fig,func=animate,frames=100,init_func=init,interval=100,blit = False)
#首先执行init初始化，再执行func函数，frames表示变量i范围，执行完之后，自动重复init
plt.show()































